-- NAME:    LongBit
-- AUTHOR:  DuckAfire
-- VERSION: 3.1.0
-- LICENSE: Zlib License
--
-- Copyright (C) 2024 DuckAfire <duckafire.github.io/nest>
--
-- This software is provided 'as-is', without any express or implied
-- warranty. In no event will the authors be held liable for any damages
-- arising from the use of this software.
--
-- Permission is granted to anyone to use this software for any purpose,
-- including commercial applications, and to alter it and redistribute it
-- freely, subject to the following restrictions:
--
-- 1. The origin of this software must not be misrepresented; you must not
--    claim that you wrote the original software. If you use this software
--    in a product, an acknowledgment in the product documentation would be
--    appreciated but is not required. 
-- 2. Altered source versions must be plainly marked as such, and must not be
--    misrepresented as being the original software.
-- 3. This notice may not be removed or altered from any source distribution.

local DA4={}
do local T21,E3,SF3,TI1,T20,SS14,P51,T19=type,error,string.find,table.insert,tostring,string.sub,pmem,tonumber local function libError3(a,b,c,d)local e=a if T21(b)=="table" then if b[1]==nil then e=a.." not specified." elseif b[1]==0 then e=a.." was not defined." else e="Invalid argument: "..a.."\nTry: " for f=1,#b do e=e..b[f].." | " end end end E3("\n\n[longBit]\n"..e.."\nFunction: "..c.."\nParameter: #"..d.."\n")end local function libAssert(a,b,c,d,e)if a then libError3(b,c,d,e)end end local LBC={} local CID={} local GetBy=1 local function classToId(a,b,c)libAssert(LBC==nil,"This class",{0},a,b)for d=1,#CID do if c==LBC[CID[d]]then return d end end libError3("The class #"..c,{0},"classToId",b)end local function getArgs(a,b,c,d,e,f)c=c or d e=e or f libAssert(c>e,'The "min" value is less that "min"',nil,a,b)return c,e end DA4.setClass=function(a,b,c)c,b=getArgs("setClass",2,c,0,b,#a-1)local d,e=1 libAssert(T21(a)~="table",'"classes"',{},"setClass","1")for f=c,b do libAssert(a[d]=="","Empty strings cannot be used like class.\nIn index #"..f,nil,"setClass","1")libAssert(SF3(a[d]," ")~=nil,"Classes names cannot contain spaces characters.\nIn index #"..f,"setClass","1")LBC[f]=a[d]d=d+1 g=true for h=1,#CID do if CID[h]==f then e=false break end end if e then TI1(CID,f)end end end DA4.setMem=function(a,b,c,d)local e=classToId("setMem",3,c)local f=nil b=b+1 d=d or 1 if T21(a)=="boolean" then f=a and 1 or 0 else f=T20(a)if d>1 then for g=1,d do f=(#f<d)and"0"..f or f end end end local function h(i,j)return SS14(T20(P51(e)),i,j)end local k=h(1,b-1)local l=h(b+d)P51(e,T19(k..f..l))end DA4.setAll=function(a,b,c,d)local e=classToId("setAll",2,b)c=c or 0 if c==0 then a="2"..a end a=T19(a)if c~=0 then a=a+P51(e)*(c<0 and-1 or 1)end local f={"small","big"}for g=1,2 do libAssert((a<0 and g==1)or(a>4294967295 and g==2),"The value specified if too "..f[g]..".",nil,"setAll","1")end if P51(e)==0 or d then P51(e,a)return true end return false end DA4.boot=function(a,b,c,d)c=getArgs("boot",3,c,0,1,0)local e,f="","" libAssert(#a>256,"The table specified is bigger that 256.",nil,"boot","1")libAssert(c+#a-1>255,"The value result addition of "..c.." (#3) with "..(#a-1).." (#1) is bigger of 256.","boot","3")for g=c,#a-1 do if P51(g)==0 or b then f=a[g+1]libAssert(T21(f)~="string",f.." is not a string.",nil,"boot","1")libAssert(T19(f)==nil,f.." have NaN characters.",nil,"boot","1")libAssert(T19(f)>999999999,f.." is too big.\nThe maximum is 999999999,",nil,"boot","1")e="2"..f while#e<10 do e=e..(d or"0")end P51(g,T19(e))end end end DA4.clear=function(a,b,c)libAssert(a~="all" and a~="memory" and a~="classes" and a~="lessClass",a,{"all","memory","classes","lessClass"},"clear","1")c,b=getArgs("clear",2,c,0,b,255)local d=false if a=="memory" or a=="all" then for e=c,b do d=true P51(e,0)end end if a=="classes" or a=="all" then d=true LBC={}end if a=="lessClass" then for e=c,b do if not LBC[e]then d=true P51(e,0)end end end return d end DA4.getNum=function(a,b,c)local d={"getNum","getBool"}libAssert(a<0 or a>9,"Invalid index #"..a..".\nTry values between 1-9.",nil,d[GetBy],"1")a=a+1 c=c or 1 libAssert(c<1 or c>9,"Invalid sub-memory scale.\nTry values between 1-9.",nil,d[GetBy],"3")GetBy=1 local e=classToId("getNum",2,b)return T19(SS14(T20(P51(e)),a,a+c-1))end DA4.getBool=function(a,b,c,d)GetBy=2 return DA4.getNum(a,b,d)==(c or 1)end DA4.getClass=function(a,b)libAssert(b and not LBC[a],"The class",{0},"getClass","1")return LBC[a]end DA4.getAll=function(a)local b=classToId("getAll",1,a)if P51(b)==0 then return 0 end return SS14(T20(P51(b)),2)end DA4.swapClass=function(a,b)libAssert(T21(a)~="string",'"newValue" is not a string.',nil,"swapClass","1")local c=LBC[b]LBC[b]=a if c then return true end return false end end
--local reference=DA4
