-- NAME:    LongBit
-- AUTHOR:  DuckAfire
-- VERSION: 3.3.0
-- LICENSE: Zlib License
--
-- Copyright (C) 2024 DuckAfire <duckafire.github.io/nest>
--
-- This software is provided 'as-is', without any express or implied
-- warranty. In no event will the authors be held liable for any damages
-- arising from the use of this software.
--
-- Permission is granted to anyone to use this software for any purpose,
-- including commercial applications, and to alter it and redistribute it
-- freely, subject to the following restrictions:
--
-- 1. The origin of this software must not be misrepresented; you must not
--    claim that you wrote the original software. If you use this software
--    in a product, an acknowledgment in the product documentation would be
--    appreciated but is not required. 
-- 2. Altered source versions must be plainly marked as such, and must not be
--    misrepresented as being the original software.
-- 3. This notice may not be removed or altered from any source distribution.

local DA4={}
do local T21,E3,SF3,TI1,T20,SS14,P51,T19,MA0=type,error,string.find,table.insert,tostring,string.sub,pmem,tonumber,math.abs local function libError3(a,b,c,d)local e=a if T21(b)=="table" then if b[1]==nil then e=a.." not specified." elseif b[1]==0 then e=a.." was not defined." else e="Invalid argument: "..a.."\nTry: " for f=1,#b do e=e..b[f].." | " end end end E3("\n\n[longBit]\n"..e.."\nFunction: "..c.."\nParameter: #"..d.."\n")end local function libAssert(a,b,c,d,e)if a then libError3(b,c,d,e)end end local ZERO=2000000000 local MAX=2999999999 local LBC={} local CID={} local GetBy=1 local function classToId(a,b,c)for d=1,#CID do if c==LBC[CID[d]]then return CID[d]end end libError3('The class "'..c..'"',{0},a,b)end DA4.setClass=function(a,b)b=b or 0 libAssert(T21(a)~="table",'"classes"',{},"setClass","1")libAssert(b<0 or b>255,'"init" is invalid.\nTry values between 0-255',nil,"setClass","1")local c=b+#a-1 c=c<255 and c or 255 local d,e=1,true for f=b,c do libAssert(a[d]=="" or SF3(a[d]," ")~=nil,"Invalid class.\nDo not use strings with spaces or void strings",nil,"setClass","1")LBC[f]=a[d]d=d+1 e=true for g=1,#CID do if CID[g]==f then e=false break end end if e then TI1(CID,f)end end return#a==d end DA4.setMem=function(a,b,c,d)local e=classToId("setMem",3,c)local f=nil b=b+1 d=d or 1 if T21(a)=="boolean" then f=a and 1 or 0 else f=T20(a)if d>1 then for g=1,d do f=(#f<d)and"0"..f or f end end end local function h(i,j)return SS14(T20(P51(e)),i,j)end local k=h(1,b-1)local l=h(b+d)P51(e,T19(k..f..l))end DA4.setAll=function(a,b,c,d,e)local f=classToId("setAll",2,b)local function g(h,i,j)if i then repeat h=SS14(h,2)until not(SS14(h,1,1)==0)return T19(h)end if#a<9 then for l=1,9-#a do if j then a=a.."0" else a="0"..a end end end return T19("2"..a)end c=c or 0 if c==0 then a=g(a)end if c~=0 then a=g(P51(m),true)+g(a,true)*(c<0 and-1 or 1)end if e then a=a(a,true,true)end if P51(f)<ZERO or P51(f)>MAX or c~=0 then local n=(a<ZERO)and 0 or(a>MAX)and 2 or 1 if d then if a<ZERO then P51(f,MAX-MA0(a))elseif a>MAX then P51(f,a-MAX)else P51(f,a)end return n end if a<ZERO then P51(f,ZERO)elseif a>MAX then P51(f,MAX)else P51(f,a)end return n end return-1 end DA4.boot=function(a,b,c,d,e)c=c or 0 e=T19(e)~=nil and e or"0" local f,g=1,"" libAssert(#a>256,"The table specified is bigger that 256.",nil,"boot","1")libAssert(c+#a-1>255,"The value result addition of "..c.." (#3) with "..(#a-1).." (#1) is bigger of 256.","boot","3")for h=c,c+#a-1 do if P51(h)<=ZERO or b then g=a[f]f=f+1 libAssert(T21(g)~="string",g.." is not a string.",nil,"boot","1")libAssert(T19(g)==nil,g.." cannot be converted to number.",nil,"boot","1")libAssert(T19(g)>999999999,g.." is too big.\nThe maximum is 999999999,",nil,"boot","1")while#g<9 do if d then g=e..g else g=g..e end end g="2"..g P51(h,T19(g))end end return#a==f end DA4.clear=function(a,b,c,d)local e=false local f={"all","memory","class","noneMemory","noneClass"}for g=1,#f do if a==f[g]then e=true break end end libAssert(not e,a,f,"clear","1")c=c or 0 d=d or 255 local h=false local i=b and 0 or ZERO if a=="memory" or a=="all" then for g=c,d do h=true P51(g,i)end end if a=="class" or a=="all" then h=true LBC={}end if a=="lessClass" then for g=c,d do if LBC[g]~=nil then h=true P51(g,i)end end end if a=="noneMemory" then for g=c,d do if LBC[g]~=nil and P51(g)<ZERO and P51(g)>MAX then h=true LBC[g]=nil end end end return h end DA4.getNum=function(a,b,c)local d={"getNum","getBool"}libAssert(a<0 or a>9,"Invalid index #"..a..".\nTry values between 1-9.",nil,d[GetBy],"1")a=a+1 c=c or 1 libAssert(c<1 or c>9,"Invalid sub-memory scale.\nTry values between 1-9.",nil,d[GetBy],"3")local e=classToId("getNum",2,b)libAssert(#T20(P51(e))<10,"Sub-memory not defined.",nil,d[GetBy],"1")GetBy=1 return T19(SS14(T20(P51(e)),a,a+c-1))end DA4.getBool=function(a,b,c,d)GetBy=2 return DA4.getNum(a,b,d)==(c or 1)end DA4.getClass=function(a,b)libAssert(b and not LBC[a],"The class",{0},"getClass","1")return LBC[a]end DA4.getAll=function(a,b)local c=classToId("getAll",1,a)if P51(c)<ZERO then return 0 end local d=SS14(T20(P51(c)),2)if b then return d end return T19(d)end DA4.swapClass=function(a,b)libAssert(T21(a)~="string",'"newValue" is not a string.',nil,"swapClass","1")local c=LBC[b]LBC[b]=a if c then return true end return false end end
--local reference=DA4
