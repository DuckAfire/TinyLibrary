-- NAME:    print+
-- AUTHOR:  DuckAfire
-- VERSION: 4.0.1
-- LICENSE: Zlib License
--
-- Copyright (C) 2024 DuckAfire <duckafire.github.io/nest>
--
-- This software is provided 'as-is', without any express or implied
-- warranty. In no event will the authors be held liable for any damages
-- arising from the use of this software.
--
-- Permission is granted to anyone to use this software for any purpose,
-- including commercial applications, and to alter it and redistribute it
-- freely, subject to the following restrictions:
--
-- 1. The origin of this software must not be misrepresented; you must not
--    claim that you wrote the original software. If you use this software
--    in a product, an acknowledgment in the product documentation would be
--    appreciated but is not required. 
-- 2. Altered source versions must be plainly marked as such, and must not be
--    misrepresented as being the original software.
-- 3. This notice may not be removed or altered from any source distribution.

local DA2={}
do local T21,E3,P11,SS14,SM9,SF3,T19,T20,S60=type,error,print,string.sub,string.match,string.find,tonumber,tostring,spr local function libError2(a,b,c,d)local e=a if T21(b)=="table" then if b[1]==nil then e="\n"..a.." not specified." else e="\nInvalid argument: "..a.."\nTry: " for f=1,#b do e=e..b[f].." | " end end end E3("\n\n[print+]"..e.."\nFunction: "..c.."\nParameter: #"..d.."\n")end local function libAssert(a,b,c,d,e)if a then libError2(b,c,d,e)end end local LenBy=1 local ShaBy=1 DA2.lenght=function(a,b,c,d,e)local f={"lenght","center","pCenter"}libAssert(T21(a)~="string",'"text"',{},f[LenBy],"1")LenBy=1 local g=P11(a,0,136)g=(e)and g-#a*2 or g if c then local h,i for j=1,#a do h=0 i=SS14(a,j,j)if SM9(i,'[%"%+%-%_%=%<%>%?%{%}%~]')or i==" " or i=="'" then h=2 elseif SM9(i,'[%!%.%,%(%)%:%;%[%]]')then h=3 elseif i=="|" then h=4 end g=g+h end end d=d or 1 b=b or 1 return g*d,(6*d)*b end DA2.center=function(a,b,c,d,e,f,g)b,c=b or 0,c or 0 if LenBy~=3 then LenBy=2 end local h,i=DA2.lenght(a,d,e,f,g)return b-h//2+1,c-i//2+1 end DA2.pCenter=function(a,b,c,d,e,f,g,h)LenBy=3 b,c=DA2.center(a,b,c,e,f,g,h)P11(a,b,c,d,f,g or 1,h)end DA2.pShadow=function(a,b,c,d,e,f,g,h)libAssert(T21(e)~="table",'"shadow" is not a table.',nil,i,"1")local j={}for k=1,#e do j[k]=e[k]end g=g or 1 local l,m,n="",0,0 local o,p,q={},{},{}local r={o,p,q,"direction","distance","color"}local s={[0]={0,-1},{0,1},{-1,0},{1,0}}local i=(ShaBy==1)and"pShadow" or"pList" libAssert(j[1]==nil,'"shadow" values not defined.',nil,i,"1")for k=1,((#j<4)and#j or 4)do for t=1,2 do l=SF3(j[k],"-")if#j[k]>0 and#j[k]<=2 then l=0 end libAssert(l==nil,"Hyphen not specified. In index #"..k..' of the table "shadow".',nil,i,"1")if t==1 then o[k]=SS14(j[k],1,l-1)j[k]=SS14(j[k],l+1,#j[k])else q[k]=SS14(j[k],1,l-1)if l==0 then p[k]=g else p[k]=SS14(j[k],l+1,#j[k])end end for u=1,3 do if r[u][k]~=nil then r[t][k]=T19(r[t][k])end end end for t=1,3 do libAssert(T21(T19(r[t][k]))~="number","The element "..r[t+3]..' is NaN. In index #'..k..' of the table "shadow".',nil,i,"1")end for u=1,2 do r[u][k]=(r[u][k]<0)and 0 or(r[u][k]>3)and 3 or r[u][k]end m=b+s[o[k]][1]*p[k]n=c+s[o[k]][2]*p[k]P11(a,m,n,q[k],f,g,h)end P11(a,b,c,d,f,g,h)ShaBy=1 end DA2.pBoard=function(a,b,c,d,e,f,g,h,i)local j,k=0,0 local l={{0,-1},{0,1},{-1,0},{1,0}}h=h or 1 m=e or 15 f=f or h for n=1,4 do j=b+l[n][1]*f k=c+l[n][2]*f P11(a,j,k,e,g,h,i)end P11(a,b,c,d,g,h,i)end DA2.pList=function(a,b,c,d,e,f,g,h,i,j)libAssert(T21(a)~="table",'"text"',{},"pList","1")d=d or 15 e=e or 10 if j then libAssert(T21(j)~="table",'"effect"',{},"pList","10")libAssert(j[1]~="shadow" and j[1]~="board",'"effect[1]"',{"shadow","board"},"pList","10")if j[1]=="shadow" then libAssert(T21(j[2])~="table",'"effect[2]" is not a table',nil,"pList","10")elseif j[1]=="board" then libAssert(T21(j[2])~="number",'"effect[2]" is NaN',nil,"pList","10")end end local k,l=0,0 for m=1,#a do k=b or 0 l=(c or 0)+e*(m-1)if i then k,l=DA2.center(a[m],k,l-#a,#a,f,g,h)end if not j then P11(T20(a[m]),k,l,d,f,g or 1,h)else if j[1]=="shadow" then ShaBy=2 DA2.pShadow(a[m],k,l,d,j[2],f,g,h)elseif j[1]=="board" then DA2.pBoard(a[m],k,l,d,j[2],j[3],f,g,h)end end end end DA2.title=function(a,b,c,d,e,f,g,h)libAssert(T21(i)=="table",'"sprites"',{},"title","1")local j=nil if T21(g)=="number" then j={}for k=1,#a do l[k]=g end elseif T21(g)=="table" then j=g if#j<#a then for k=#j+1,#a do j[k]=0 end end else j={}for k=1,#a do j[k]=0 end end b,c=b or 0,c or 0 e=e or 1 f=f or 1 d=d or 8 d=d*f local m,n for k=1,#a do if h then m=b n=c+(d+e)*(k-1)else m=b+(d+e)*(k-1)n=c end S60(a[k],m,n,j[k],f)end end end
--local reference=DA2
