-- NAME:    LongBit
-- AUTHOR:  DuckAfire
-- VERSION: 3.4.2
-- LICENSE: Zlib License
--
-- Copyright (C) 2024 DuckAfire <duckafire.github.io/nest>
--
-- This software is provided 'as-is', without any express or implied
-- warranty. In no event will the authors be held liable for any damages
-- arising from the use of this software.
--
-- Permission is granted to anyone to use this software for any purpose,
-- including commercial applications, and to alter it and redistribute it
-- freely, subject to the following restrictions:
--
-- 1. The origin of this software must not be misrepresented; you must not
--    claim that you wrote the original software. If you use this software
--    in a product, an acknowledgment in the product documentation would be
--    appreciated but is not required. 
-- 2. Altered source versions must be plainly marked as such, and must not be
--    misrepresented as being the original software.
-- 3. This notice may not be removed or altered from any source distribution.

local TL4={}
do local T63,E3,T20,P51,T19,SS14,T21,SF3,TI1,MA0=trace,error,tostring,pmem,tonumber,string.sub,type,string.find,table.insert,math.abs local function libError(a,b,c,d,e,f)if a~=nil then if not a then return end end local g={"Error","Function","Index"}local h={nil,e,"#"..f}local i="\n\n[longBit]"b=b and'"'..b..'"' or"" local function j(k)h[1]=b..k end if c=="1" then j("was not specified")elseif c=="2" then j("was not defined")elseif c=="3" then j("is invalid")else j(c)end for l=1,3 do i=i.."\n"..g[l]..": "..h[l].."." if l==1 and d~=nil then i=i.."\nTry: " for m=1,#d-1 do i=i.." | " end n=i..d[#d] end end T63("\n>\n>\n>")E3(i.."\n")end local ZERO=2000000000 local MAX=2999999999 local LBC={} local CID={} local GetBy=1 local function classToId(a,b,c)for d=1,#CID do if c==LBC[CID[d]]then return CID[d]end end libError(nil,nil,"Invalid class: "..c,nil,a,b)end TL4.getNum=function(a,b,c)local d={"getNum","getBool"}libError(a<0 or a>9,nil,"Invalid index #"..a..".\nTry values between 1-9",nil,d[GetBy],1)a=a+1 c=c or 1 libError(c<1 or c>9,nil,"Invalid sub-memory scale.\nTry values between 1-9",nil,d[GetBy],3)local e=classToId("getNum",2,b)libError(#T20(P51(e))<10,nil,"Sub-memory not defined",nil,d[GetBy],1)GetBy=1 return T19(SS14(T20(P51(e)),a,a+c-1))end TL4.getBool=function(a,b,c,d)GetBy=2 return TL4.getNum(a,b,d)==(c or 1)end TL4.getClass=function(a,b)libError(b and not LBC[a],"class","3",nil,"getClass",1)return LBC[a]end TL4.getAll=function(a,b)local c=classToId("getAll",1,a)if P51(c)<ZERO then return 0 end local d=SS14(T20(P51(c)),2)if b then return d end return T19(d)end TL4.setClass=function(a,b)b=b or 0 libError(T21(a)~="table","classes","1",nil,"setClass",1)libError(b<0 or b>255,nil,'"init" is invalid.\nTry values between 0-255',nil,"setClass",1)local c=b+#a-1 c=c<255 and c or 255 local d,e=1,true for f=b,c do libError(a[d]=="" or SF3(a[d]," ")~=nil,nil,"Invalid class. Do not use strings with spaces or void strings",nil,"setClass",1)LBC[f]=a[d]d=d+1 e=true for g=1,#CID do if CID[g]==f then e=false break end end if e then TI1(CID,f)end end return#a==d end TL4.setNum=function(a,b,c,d)local e=classToId("setMem",3,c)local f=nil b=b+1 d=d or 1 if T21(a)=="boolean" then f=a and 1 or 0 else f=T20(a)if d>1 then for g=1,d do f=(#f<d)and"0"..f or f end end end local function h(i,j)return SS14(T20(P51(e)),i,j)end local k=h(1,b-1)local l=h(b+d)P51(e,T19(k..f..l))end TL4.setAll=function(a,b,c)local d=classToId("setAll",2,b)if c then a=P51(d)+a else a=T20(MA0(a))if#a<9 then for e=1,9-#a do a="0"..a end end a=T19("2"..a)end local f=(a<ZERO)and-1 or(a>MAX)and 1 or 0 if f<0 then P51(d,ZERO) elseif f>0 then P51(d,MAX) else P51(d,a) end return f end TL4.boot=function(a,b,c,d,e)c=c or 0 e=T19(e)~=nil and e or"0" local f,g=0,"" libError(#a>256,nil,"The table specified is bigger that 256",nil,"boot",1)libError(c+#a-1>255,nil,"The value result addition of "..c.." (#3) with "..(#a-1).." (#1) is bigger of 256",nil,"boot",3)for h=c,c+#a-1 do f=f+1 if P51(h)<=ZERO or b then g=a[f]libError(T21(g)~="string",nil,g.." is not a string",nil,"boot",1)libError(T19(g)==nil,nil,g.." cannot be converted to number",nil,"boot",1)libError(T19(g)>999999999,nil,g.." is too big.\nThe maximum is 999999999",nil,"boot",1)while#g<9 do if d then g=e..g else g=g..e end end g="2"..g P51(h,T19(g))end end return#a==f end TL4.update=function(a,b,c)libError(#b~=#c,nil,"The quantity of values and indexes must be equal",nil,"update","1-2")local d=false for e=1,9 do if e==c[e]then TL4.setNum(b[e],c[e],a,#T20(b[e]))d=true end end return d end TL4.clear=function(a,b,c,d)local e=false local f={"all","memory","class","noneMemory","noneClass"}for g=1,#f do if a==f[g]then e=true break end end libError(not e,a,f,nil,"clear",1)c=c or 0 d=d or 255 local h=false local i=b and 0 or ZERO if a=="memory" or a=="all" then for g=c,d do h=true P51(g,i)end end if a=="class" or a=="all" then h=true LBC={}end if a=="lessClass" then for g=c,d do if LBC[g]~=nil then h=true P51(g,i)end end end if a=="noneMemory" then for g=c,d do if LBC[g]~=nil and P51(g)<ZERO and P51(g)>MAX then h=true LBC[g]=nil end end end return h end TL4.swapClass=function(a,b)libError(T21(a)~="string","newValue","is not a string",nil,"swapClass",1)local c=LBC[b]LBC[b]=a if c then return true end return false end end
--local reference=TL4
